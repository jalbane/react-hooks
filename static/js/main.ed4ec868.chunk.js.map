{"version":3,"sources":["Components/Display.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Display","props","useState","Date","date","style","backgroundColor","fontSize","completed","className","onClick","handleDelete","index","handleComplete","split","text","App","todoText","setTodoText","completeTask","copy","slice","completedItem","splice","deleteTask","AddTodo","addTodo","value","setValue","onSubmit","e","preventDefault","width","padding","height","placeholder","onChange","target","method","map","i","key","newTodos","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAGe,SAASA,EAAQC,GAAO,IAAD,EACxBC,mBAASC,QAAjBC,EADgC,oBAQrC,OACC,yBAAKC,MAAS,CACVC,gBAAiB,OACjBC,SAAU,KAEXN,EAAMO,UACL,yBAAKC,UAAY,OAAM,4BAAQC,QAAW,kBAAMT,EAAMU,aAAaV,EAAMW,SAAlD,iBACvB,yBAAKH,UAAY,OAAM,4BAAQC,QAAW,kBAAMT,EAAMY,eAAeZ,EAAMW,SAApD,mBAE1B,yBAAKH,UAAY,eAblBL,EAAOA,EAAKU,MAAM,QACN,IAeX,6BACA,yBAAKL,UAAY,aACfR,EAAMc,OCqCIC,MA1Df,WAAgB,IAAD,EACmBd,mBAAS,IAD5B,mBACNe,EADM,KACIC,EADJ,KASPC,EAAe,SAAAP,GACnB,IAAMQ,EAAOH,EAASI,QAChBC,EAAiBF,EAAKR,GAAOJ,UACnCY,EAAKG,OAAOX,EAAO,EAAG,CAACG,KAAMK,EAAKR,GAAOG,KAAMP,WAAYc,IAE3DJ,EAAYE,IAGRI,EAAa,SAAAZ,GACjB,GAAIK,EAASL,GAAOJ,UAAU,CAC5B,IAAMY,EAAOH,EAASI,QACtBD,EAAKG,OAAOX,EAAO,GACnBM,EAAYE,KAIhB,SAASK,EAAT,GAA4B,IAAVC,EAAS,EAATA,QAAS,EACCxB,mBAAS,CAAC,CAClCa,KAAM,IACNP,WAAW,KAHY,mBAClBmB,EADkB,KACXC,EADW,KAazB,OACE,0BAAMC,SARa,SAAAC,GACnBA,EAAEC,iBACEJ,IACJD,EAAQC,GACRC,EAAS,OAKP,2BAAOvB,MAAQ,CAAC2B,MAAO,MAAOC,QAAS,EAAGC,OAAQ,GAAI3B,SAAU,IAAK4B,YAAc,iCAAiCR,MAASA,EAAMZ,KAAMqB,SAAa,SAACN,GAAD,OAAMF,EAAS,CAACE,EAAEO,OAAOV,SAASW,OAAS,UAKvM,OACA,yBAAK7B,UAAY,OACf,yBAAKA,UAAY,UACf,wBAAIA,UAAY,UAAhB,4BAEF,yBAAKA,UAAY,aACbQ,EAASsB,KAAK,SAAC3B,EAAO4B,GAAR,OAAc,kBAACxC,EAAD,CAASe,KAAQH,EAAMG,KAAMP,UAAaI,EAAMJ,UAAWI,MAAS4B,EAAGC,IAAO7B,EAAMG,KAAMF,eAAkBM,EAAcR,aAAgBa,OACxK,kBAACC,EAAD,CAASC,QAjDG,SAAAX,GACd,IACM2B,EAAQ,sBAAOzB,GAAP,CAAiB,CAACF,OAAMP,WADpB,KAElBU,EAAYwB,SCEIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ed4ec868.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport '../display.css';\r\n\r\nexport default function Display(props){\r\n\tlet [date] = useState(Date());\r\n\r\n\tconst displayDate = () => {\r\n\t\tdate = date.split(\"GMT\");\r\n\t\treturn date[0];\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div style = {{ \r\n\t\t\t\t\t\tbackgroundColor: '#fff',\r\n\t\t\t\t\t\tfontSize: 12\r\n\t\t\t\t\t }}>\r\n\t\t\t{ props.completed \r\n\t\t\t ? <div className = 'btn'><button onClick = {() => props.handleDelete(props.index)}> Delete Task</button></div>\r\n\t\t\t : <div className = 'btn'><button onClick = {() => props.handleComplete(props.index)}> Complete Task</button></div>\r\n\t\t\t}\r\n\t\t\t<div className = 'time-stamp'>\r\n\t\t\t\t{displayDate()}\r\n\t\t\t</div>\r\n\t\t\t<br></br>\r\n\t\t\t<div className = 'todo-text'> \r\n\t\t\t\t{props.text}  \r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}","import React, {useState} from 'react';\r\nimport '../App.css';\r\nimport Display from '../Components/Display';\r\n\r\nfunction App() {\r\n  const [todoText, setTodoText] = useState([]);\r\n\r\n  const addTodo = text => {\r\n    const completed = false\r\n    const newTodos = [...todoText, {text, completed}];\r\n    setTodoText(newTodos);\r\n  }\r\n\r\n  const completeTask = index => {\r\n    const copy = todoText.slice()\r\n    const completedItem = (copy[index].completed)\r\n    copy.splice(index, 1, {text: copy[index].text, completed: !completedItem} )\r\n    //const newTodos = [...copy];\r\n    setTodoText(copy)\r\n  }\r\n\r\n  const deleteTask = index => {\r\n    if (todoText[index].completed){\r\n      const copy = todoText.slice()\r\n      copy.splice(index, 1)\r\n      setTodoText(copy)\r\n    }\r\n  }\r\n\r\n  function AddTodo({addTodo}){\r\n    const [value, setValue] = useState([{\r\n      text: ' ',\r\n      completed: false\r\n    }]);\r\n\r\n    const handleSubmit = e => {\r\n      e.preventDefault();\r\n      if(!value) return;\r\n      addTodo(value);\r\n      setValue('');\r\n    }\r\n\r\n    return(\r\n      <form onSubmit = {handleSubmit}>\r\n        <input style= {{width: '99%', padding: 0, height: 45, fontSize: 24}} placeholder = 'Enter in an item or message...' value = {value.text} onChange = { (e) =>setValue([e.target.value])} method = \"post\"/>\r\n      </form>\r\n      );\r\n  }\r\n \r\n  return (\r\n  <div className = 'App'>\r\n    <div className = 'banner'>\r\n      <h1 className = 'header'> To-do list / chat log </h1>\r\n    </div>\r\n    <div className = 'todo-list'>\r\n      { todoText.map( (index, i) => <Display text = {index.text} completed = {index.completed} index = {i} key = {index.text} handleComplete = {completeTask} handleDelete = {deleteTask}/> )}\r\n      <AddTodo addTodo={addTodo}/>\r\n    </div>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}